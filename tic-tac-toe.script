main()
{
   asm { @"If you want to go first enter 1, otherwise 0\r\n" }
   human_first = 0;
   asm { inn in pop add }

   if (human_first == 0)
   {
     asm { @"I go first and I'm X\r\n" }
   }
   else
   {
     asm { @"I go second and I'm X\r\n" }
   }

   board = 0;
   exp = 0;

   while (1)
   {
       // Computer goes first
       if (human_first == 0)
	   {
	     asm { @"\r\n\r\n\r\n" }
	     move = get_computer_move_going_first(board);

	     asm { @"I move to: " }
	     __outn(move);
	     asm { @"\r\n\r\n" }

	     exp = exponent(move);
	     board = 2*exp + board;
	     print_board(board);

         check_for_win(board);
	   }
	   else
	   {
	     print_board(board);
	   }

       invalid_move = 1;
	   while (invalid_move == 1)
	   {
         asm { @"Move: " }
         // tricky way of getting an int.
	     // pushes a zero on the stack
	     // reads a number and the CR
	     // then pops the CR and then
	     // adds our zero and our number
	     // putting them back on the stack
	     // where 'new_move' used to be
	     new_move = 0;
	     asm { inn in pop add }

         move = new_move;
	     exp = exponent(move);

		 if (((board / exp) %3 != 0) || (move < 0) || (move > 8))
		 {
		   asm { @"ILLEGAL MOVE! Try again human!\r\n" }
		 }
		 else
		 {
		   invalid_move = 0;
         }
       }

	   board = exp + board;

       // Computer goes last
       if (human_first == 1)
	   {
	     asm { @"\r\n\r\n\r\n" }
	     move = get_computer_move_going_last(board);

	     asm { @"I move to: " }
	     __outn(move);
	     asm { @"\r\n\r\n" }

	     exp = exponent(move);
	     board = 2*exp + board;
	     print_board(board);

         check_for_win(board);
	   }
   }
}

check_for_win(board)
{
  pos_0 = ((board/exponent(0))%3);
  pos_1 = ((board/exponent(1))%3);
  pos_2 = ((board/exponent(2))%3);
  pos_3 = ((board/exponent(3))%3);
  pos_4 = ((board/exponent(4)%3));
  pos_5 = ((board/exponent(5))%3);
  pos_6 = ((board/exponent(6))%3);
  pos_7 = ((board/exponent(7))%3);
  pos_8 = ((board/exponent(8))%3);

  if ((pos_0 == 2 && pos_1 == 2 && pos_2 == 2) ||
      (pos_3 == 2 && pos_4 == 2 && pos_5 == 2) ||
      (pos_6 == 2 && pos_7 == 2 && pos_8 == 2) ||
      (pos_0 == 2 && pos_3 == 2 && pos_6 == 2) ||
      (pos_1 == 2 && pos_4 == 2 && pos_7 == 2) ||
      (pos_2 == 2 && pos_5 == 2 && pos_8 == 2) ||
      (pos_0 == 2 && pos_4 == 2 && pos_8 == 2) ||
      (pos_2 == 2 && pos_4 == 2 && pos_6 == 2))
  {
    asm { @"**** I WIN! ****\r\n\r\n" }
	while (1)
	{

	}
  }
}

get_computer_move_going_last(board)
{
  new_move = 99;



  return new_move;
}

get_computer_move_going_first(board)
{
  new_move = 0;
  if (board == 0) { new_move =  0;}
  if (board == 5) { new_move =  3;}
  if (board == 68) { new_move =  4;}
  if (board == 473) { new_move =  6;}
  if (board == 959) { new_move =  5;}
  if (board == 2417) { new_move =  5;}
  if (board == 6791) { new_move =  5;}
  if (board == 140) { new_move =  6;}
  if (board == 302) { new_move =  4;}
  if (board == 1193) { new_move =  8;}
  if (board == 2651) { new_move =  2;}
  if (board == 3398) { new_move =  8;}
  if (board == 9230) { new_move =  6;}
  if (board == 7025) { new_move =  6;}
  if (board == 788) { new_move =  4;}
  if (board == 3137) { new_move =  5;}
  if (board == 7511) { new_move =  5;}
  if (board == 2246) { new_move =  4;}
  if (board == 8969) { new_move =  5;}
  if (board == 6620) { new_move =  4;}
  if (board == 11) { new_move =  3;}
  if (board == 146) { new_move =  6;}
  if (board == 308) { new_move =  6;}
  if (board == 794) { new_move =  4;}
  if (board == 1199) { new_move =  8;}
  if (board == 3143) { new_move =  5;}
  if (board == 7517) { new_move =  5;}
  if (board == 2252) { new_move =  4;}
  if (board == 2657) { new_move =  6;}
  if (board == 8975) { new_move =  5;}
  if (board == 6626) { new_move =  5;}
  if (board == 7115) { new_move =  4;}
  if (board == 7193) { new_move =  6;}
  if (board == 7841) { new_move =  4;}
  if (board == 9299) { new_move =  4;}
  if (board == 29) { new_move =  1;}
  if (board == 44) { new_move =  4;}
  if (board == 449) { new_move =  7;}
  if (board == 935) { new_move =  5;}
  if (board == 3608) { new_move =  8;}
  if (board == 7982) { new_move =  7;}
  if (board == 2393) { new_move =  8;}
  if (board == 6767) { new_move =  7;}
  if (board == 116) { new_move =  2;}
  if (board == 278) { new_move =  2;}
  if (board == 764) { new_move =  2;}
  if (board == 2222) { new_move =  2;}
  if (board == 6596) { new_move =  2;}
  if (board == 83) { new_move =  1;}
  if (board == 98) { new_move =  6;}
  if (board == 1583) { new_move =  5;}
  if (board == 4256) { new_move =  8;}
  if (board == 8630) { new_move =  7;}
  if (board == 1799) { new_move =  3;}
  if (board == 3743) { new_move =  3;}
  if (board == 8117) { new_move =  3;}
  if (board == 332) { new_move =  2;}
  if (board == 818) { new_move =  2;}
  if (board == 2276) { new_move =  2;}
  if (board == 6650) { new_move =  2;}
  if (board == 245) { new_move =  2;}
  if (board == 266) { new_move =  4;}
  if (board == 455) { new_move =  6;}
  if (board == 1157) { new_move =  8;}
  if (board == 2615) { new_move =  3;}
  if (board == 6989) { new_move =  6;}
  if (board == 290) { new_move =  1;}
  if (board == 344) { new_move =  1;}
  if (board == 992) { new_move =  1;}
  if (board == 2450) { new_move =  1;}
  if (board == 6824) { new_move =  1;}
  if (board == 731) { new_move =  1;}
  if (board == 746) { new_move =  4;}
  if (board == 1151) { new_move =  7;}
  if (board == 3095) { new_move =  8;}
  if (board == 7469) { new_move =  7;}
  if (board == 980) { new_move =  2;}
  if (board == 2924) { new_move =  2;}
  if (board == 7298) { new_move =  2;}
  if (board == 2189) { new_move =  2;}
  if (board == 2210) { new_move =  4;}
  if (board == 2399) { new_move =  5;}
  if (board == 3614) { new_move =  8;}
  if (board == 9446) { new_move =  6;}
  if (board == 3101) { new_move =  8;}
  if (board == 8933) { new_move =  6;}
  if (board == 2234) { new_move =  1;}
  if (board == 2288) { new_move =  1;}
  if (board == 2936) { new_move =  1;}
  if (board == 8768) { new_move =  1;}
  if (board == 6563) { new_move =  2;}
  if (board == 6584) { new_move =  6;}
  if (board == 8069) { new_move =  4;}
  if (board == 8123) { new_move =  3;}
  if (board == 8285) { new_move =  3;}
  if (board == 10229) { new_move =  3;}
  if (board == 6608) { new_move =  1;}
  if (board == 6662) { new_move =  1;}
  if (board == 7310) { new_move =  1;}
  return new_move;
}

print_board(board)
{
  print_piece((board/exponent(0))%3);
  print_piece((board/exponent(1))%3);
  print_piece((board/exponent(2))%3);
  asm { @"\r\n" }
  print_piece((board/exponent(3))%3);
  print_piece((board/exponent(4)%3));
  print_piece((board/exponent(5))%3);
  asm { @"\r\n" }
  print_piece((board/exponent(6))%3);
  print_piece((board/exponent(7))%3);
  print_piece((board/exponent(8))%3);
  asm { @"\r\n" }
}

print_piece(piece)
{
  if (piece == 0) { asm { @"." } }
  if (piece == 1) { asm { @"O" } }
  if (piece == 2) { asm { @"X" } }
}

exponent(position)
{
  exp = 1;
  for(i=0; i < position; i++)
  {
    exp = exp *3;
  }

  return exp;
}

